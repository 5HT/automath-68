use crate::ast::Henk;
grammar;
// Copyright (c) Groupoid Infinity 2024
// AUT = U | V | [ V : AUT ] AUT | ( V : AUT ) AUT | AUT AUT | ( AUT )
Name:   String = { r"[a-zA-Z_][a-zA-Z_\d]*" => <>.to_string() };
Universe: Henk = { <n:r"\*[\d]+"> => Henk::Universe(i64::from_str_radix(&n[1..],10).unwrap()), <n:r"\*"> => Henk::Universe(0) };
Variable: Henk = { <n:Name> => Henk::Variable(n) };
Lambda:   Henk = { <l:"("> <v:Name> <s:":"> <t:Expr> <r:")"> <e:Expr1> => Henk::Lambda(v,Box::new(t),Box::new(e)) };
Forall:   Henk = { <l:"["> <v:Name> <s:":"> <t:Expr> <r:"]"> <e:Expr1> => Henk::Forall(v,Box::new(t),Box::new(e)) };
Expr1:    Henk = { Lambda, Forall, Expr2 };
Expr2:    Henk = { <l:Expr2> <r:Expr3> => Henk::App(Box::new(l),Box::new(r)), Expr3 };
Expr3:    Henk = { Variable, Universe, <l:"("> <e:Expr1> <r:")"> => e };
pub Expr: Henk = { Expr1 };
