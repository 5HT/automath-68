
use crate::ast::Henk;
grammar; // AUT = U | V | [ V : AUT ] AUT | ( V : AUT ) AUT | AUT AUT | ( AUT )

Name:      String = { r"[a-zA-Z_][a-zA-Z_\d]*" => <>.to_string() };
Universe:    Henk = { <n:r"\*[\d]+"> => Henk::Universe(i64::from_str_radix(&n[1..],10).unwrap()), <n:r"\*"> => Henk::Universe(0), };
Variable:    Henk = { <n:Name> => Henk::Variable(n), };
Unit:        Henk = { <l:"("> <e:Expr> <r:")"> => e, };
Lambda:      Henk = { <l:"("> <v:Name> <s:":"> <t:Expr> <r:")"> <e:LExpr> => Henk::Lambda(v,Box::new(t),Box::new(e)), };
Forall:      Henk = { <l:"["> <v:Name> <s:":"> <t:Expr> <r:"]"> <e:LExpr> => Henk::Forall(v,Box::new(t),Box::new(e)), };
LExpr:       Henk = { Variable, Universe, Unit, Lambda, Forall, };
Application: Henk = { <l:Expr> <r:LExpr> => Henk::App(Box::new(l),Box::new(r)), };
pub    Expr: Henk = { LExpr, Application, };
