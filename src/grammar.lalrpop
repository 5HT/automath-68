
use crate::ast::Henk;
grammar; // AUT-68 = U | I | [ I : PTS ) PTS | ( I : PTS ) PTS | PTS PTS | ( PTS )

Name:      String = { r"[a-zA-Z][a-zA-Z\d]*" => <>.to_string() };
Universe:    Henk = { <n:r"\*[\d]+"> => Henk::Universe(i64::from_str_radix(n,10).unwrap()), <n:r"\*"> => Henk::Universe(0), };
Variable:    Henk = { <n:Name> => Henk::Variable(n), };
Lambda:      Henk = { <l:"("> <v:Name> <s:":"> <t:Expr> <r:")"> <e:RExpr> => Henk::Lambda(v,Box::new(t),Box::new(e)) };
Forall:      Henk = { <l:"["> <v:Name> <s:":"> <t:Expr> <r:"]"> <e:RExpr> => Henk::Forall(v,Box::new(t),Box::new(e)), };
LExpr:       Henk = { Variable, Lambda, Forall };
RExpr:       Henk = { Application, Arrow };
Application: Henk = { <l:LExpr> <r:RExpr> => Henk::Application(Box::new(l),Box::new(r)), r"\(" <e:Expr> r"\)" => e };
Arrow:       Henk = { <t:LExpr> <a:">"> <e:RExpr> => Henk::Forall("".to_string(),Box::new(t),Box::new(e)), };

pub Expr: Henk = {
    #[precedence(level="0")] Application,
    #[precedence(level="1")] Universe,
    #[precedence(level="2")] Arrow,
    #[precedence(level="3")] #[assoc(side="left")] Variable,
    #[precedence(level="4")] #[assoc(side="left")] Lambda,
    #[precedence(level="5")] #[assoc(side="left")] Forall,
};

